{"version":3,"sources":["jamaica.m4a","background-music.mp3","balegdeh_face.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","background","Audio","Background","sound","Balegdeh","volume","gameSeconds","App","state","bottom","left","score","gameOver","gameInProgress","secondsRemaining","display","balegdeh","Math","random","window","innerHeight","innerWidth","pause","currentTime","play","setState","toString","startGame","clearInterval","setTimeout","endGame","setInterval","balegdehDivStlye","this","finalScore","className","onClick","id","style","src","balegdehFace","alt","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,8C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,uPCMrCC,EAAa,IAAIC,MAAMC,KACvBC,EAAQ,IAAIF,MAAMG,KAExBD,EAAME,OAAS,GACfL,EAAWK,OAAS,GAEpB,IAAIC,EAAc,KA8FHC,E,2MA1FXC,MAAQ,CACNC,OAAQ,KACRC,KAAM,KACNC,MAAO,EACPC,UAAU,EACVC,gBAAgB,EAChBC,iBAAkB,GAClBC,SAAS,G,EAGbC,SAAW,WACT,IAAI,EAAKR,MAAMI,SAAS,CACtB,IAAIH,EAASQ,KAAKC,SAAWC,OAAOC,YAChCV,EAAOO,KAAKC,SAAWC,OAAOE,WAC/BZ,EAAS,MAAKA,GAAU,KACxBC,EAAO,MAAKA,GAAQ,KACvBP,EAAMmB,QACNnB,EAAMoB,YAAc,EACpBpB,EAAMqB,OACN,EAAKC,SAAS,CACZhB,OAASA,EAAQiB,WAAa,KAC9BhB,KAAOA,EAAMgB,WAAa,KAC1Bf,MAAO,EAAKH,MAAMG,MAAQ,M,EAKhCgB,UAAY,WACV3B,EAAWwB,OACX,EAAKR,WACLY,cAActB,GACd,EAAKmB,SAAS,CACZZ,gBAAgB,EAChBD,UAAU,EACVD,MAAO,EACPG,iBAAkB,GAClBC,SAAS,IAGXc,WAAW,WACT,EAAKC,WACJ,KAEHxB,EAAcyB,YAAY,WACxB,EAAKN,SAAS,CACZX,iBAAkB,EAAKN,MAAMM,iBAAmB,KAEjD,M,EAGLgB,QAAU,WACR,EAAKL,SAAS,CACZZ,gBAAgB,EAChBD,UAAU,EACVG,SAAS,IAEXa,cAActB,I,wEAId,IAAM0B,EAAmB,CACvBvB,OAAQwB,KAAKzB,MAAMC,OACnBC,KAAMuB,KAAKzB,MAAME,KACjBK,QAAUkB,KAAKzB,MAAMO,QAAW,eAAiB,QAG7CmB,EAAcD,KAAKzB,MAAMI,SAAY,sEAA2C,wBAAIuB,UAAU,SAASF,KAAKzB,MAAMG,QAAmB,GAC3I,OACE,yBAAKwB,UAAU,QACXF,KAAKzB,MAAMK,gBACX,yBAAKsB,UAAU,WACZD,EACD,wCACE,iGACF,4BAAQE,QAASH,KAAKN,UAAWQ,UAAU,kBAA3C,eAIHF,KAAKzB,MAAMK,gBACV,yBAAKsB,UAAU,WACb,wBAAIA,UAAU,WAAWF,KAAKzB,MAAMM,mBAExC,yBAAKqB,UAAU,qBAAqBE,GAAG,WAAWD,QAASH,KAAKjB,SAAUsB,MAAON,GAC/E,yBAAKO,IAAKC,IAAcL,UAAU,WAAWM,IAAI,e,GArFzCC,IAAMC,WCFJC,QACW,cAA7BzB,OAAO0B,SAASC,UAEe,UAA7B3B,OAAO0B,SAASC,UAEhB3B,OAAO0B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5983c807.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/jamaica.30eacd80.m4a\";","module.exports = __webpack_public_path__ + \"static/media/background-music.92d12c3e.mp3\";","module.exports = __webpack_public_path__ + \"static/media/balegdeh_face.46b0e4dd.png\";","import React from 'react';\nimport './App.css';\nimport Balegdeh from './jamaica.m4a';\nimport Background from './background-music.mp3';\nimport balegdehFace from './balegdeh_face.png';\n\nconst background = new Audio(Background);\nconst sound = new Audio(Balegdeh);\n\nsound.volume = 0.5;\nbackground.volume = 0.3;\n\nlet gameSeconds = null;\n\nclass App extends React.Component {\n\n    state = {\n      bottom: '0%',\n      left: '0%',\n      score: 0,\n      gameOver: false,\n      gameInProgress: false,\n      secondsRemaining: 20,\n      display: false,\n    }\n\n  balegdeh = () => {\n    if(!this.state.gameOver){\n      let bottom = Math.random() * window.innerHeight;\n      let left = Math.random() * window.innerWidth;\n      if(bottom > 200) bottom -= 200;\n      if(left > 200) left -= 200;\n      sound.pause();\n      sound.currentTime = 0;\n      sound.play();\n      this.setState({\n        bottom: (bottom).toString() + 'px',\n        left: (left).toString() + 'px',\n        score: this.state.score + 1,\n      });\n    }\n  }\n\n  startGame = () => {\n    background.play();\n    this.balegdeh();\n    clearInterval(gameSeconds);\n    this.setState({\n      gameInProgress: true,\n      gameOver: false,\n      score: 0,\n      secondsRemaining: 20,\n      display: true,\n    });\n\n    setTimeout(() => {\n      this.endGame();\n    }, 20000);\n\n    gameSeconds = setInterval(() => {\n      this.setState({\n        secondsRemaining: this.state.secondsRemaining - 1,\n      })\n    }, 1000);\n  }\n\n  endGame = () => {\n    this.setState({\n      gameInProgress: false,\n      gameOver: true,\n      display: false,\n    })\n    clearInterval(gameSeconds);\n  }\n\n  render() {\n    const balegdehDivStlye = {\n      bottom: this.state.bottom,\n      left: this.state.left,\n      display: (this.state.display) ? 'inline-block' : 'none',\n    }\n\n    const finalScore = (this.state.gameOver) ? <h2>Amazing Balegdeh. Your Final Score was <h1 className=\"score\">{this.state.score}</h1></h2> : ''\n    return (\n      <div className=\"App\">\n        {!this.state.gameInProgress && \n          <div className=\"content\">\n            {finalScore}\n            <h1>Balegdeh</h1>\n              <h3>How many times can you click balegdeh before the timer runs out??</h3>\n            <button onClick={this.startGame} className=\"btn btn-danger\">Start Game</button>\n          </div>\n        }\n        \n        {this.state.gameInProgress && \n          <div className=\"content\">\n            <h1 className=\"seconds\">{this.state.secondsRemaining}</h1>\n          </div>}\n        <div className=\"balegdeh-container\" id=\"balegdeh\" onClick={this.balegdeh} style={balegdehDivStlye}>\n          <img src={balegdehFace} className=\"balegdeh\" alt=\"face\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}